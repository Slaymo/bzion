/// Automatically set the margin-bottom of an element to a specified value but have the last
/// type of that element to have margin bottom 0
///
/// @param {Number [unit]} $margin [30px]
///   The margin bottom that will be used

@mixin autoMarginBottom($margin: $Settings-Page_Section-Small_Margin) {
    margin-bottom: $margin;

    &:last-child {
        margin-bottom: 0;
    }
}


/// Automatically set the margin bottom of an element to the global setting and set the last
/// child to have no margin bottom on the specified views

@mixin make-margin($viewSize) {
    @include respond-to($viewSize) {
        @include autoMarginBottom();
    }
}


/// Return a dark color or a light color based on the color given. This function can be used
/// when wanting to dynamically set the font-color based on the background color.
///
/// @param {Color} $color
///   The background color you want to get a font color for
///
/// @return {Hex} A light color for a dark background or a dark color for a light background

@function set-text-from-color($color) {
    // Not perfectly 50% because it's not perfectly split
    @if (lightness($color) > 54) {
        @return darken($color, 50%); // Lighter background, return dark color
    }
    @else {
        @return $Color-White; // Darker background, return light color
    }
}

@mixin profile-picture() {
    img {
        width: 100%;

        @include respond-to(sm) {
            width: 30%;
        }

        @include respond-to(xs) {
            width: 40%;
        }
    }

    @include respond-to(sm) {
        margin-bottom: 30px;
        text-align: center;
    }
}

/// Get the next key in a map. This function will return null if the key provided is the last key in the map.
///
/// @param {Map}    $map - The target map we will be looking through
/// @param {String} $key - The key where it's following key needs to be found
///
/// @example scss - Usage
///   $map: (
///     foo: 1,
///     bar: 2,
///     qux: 3
///   );
///
///   $next-key: get-next-key($map, bar); // "qux"

@function get-next-key($map, $key) {
    $key-names: map-keys($map);
    $n: index($key-names, $key);
    $size: if($n < length($key-names), nth($key-names, $n + 1), null);

    @return $size;
}
