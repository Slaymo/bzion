// -----------------------------------------------------------------------------
// This file contains mixins related to color manipulation/handling.
// -----------------------------------------------------------------------------

/// Return a dark color or a light color based on the color given. This function can be used
/// when wanting to dynamically set the font-color based on the background color.
///
/// @param {Color} $color
///   The background color you want to get a font color for
///
/// @return {Hex} A light color for a dark background or a dark color for a light background

@function set-text-from-color($color) {
    // Not perfectly 50% because it's not perfectly split
    @if (lightness($color) > 54) {
        @return darken($color, 50%); // Lighter background, return dark color
    }
    @else {
        @return $Color-White; // Darker background, return light color
    }
}


/// Slightly lighten a color
///
/// @access public
///
/// @param {Color} $color - color to tint
/// @param {Number} $percentage - percentage of `$color` in returned color
///
/// @return {Color}

@function tint($color, $percentage) {
    @return mix(white, $color, $percentage);
}


/// Slightly darken a color
///
/// @access public
///
/// @param {Color}  $color - color to shade
/// @param {Number} $percentage - percentage of `$color` in returned color
///
/// @return {Color}

@function shade($color, $percentage) {
    @return mix(black, $color, $percentage);
}


/// Ignorantly try to guess whether a given object is a color or not
///
/// @access public
///
/// @param {*} $value
///
/// @return {Boolean}

@function is-color($value) {
    @if type-of($value) == 'color' {
        @return true;
    }

    @if type-of($value) != 'string' {
        @return false;
    }

    $lower: to-lower-case($value);
    $result: (
        str-slice($lower, 1, 1) == '#' or
        str-slice($lower, 1, 3) == 'rgb' or
        str-slice($lower, 1, 3) == 'hsl'
    );

    @return $result;
}
