// -----------------------------------------------------------------------------
// This file contains mixins for generating helper classes in all 4 directions
// of an element.
// -----------------------------------------------------------------------------

/// The valid directions this axis builder can take
///
/// - null -> all directions
/// - 't' -> top
/// - 'b' -> bottom
/// - 'r' -> right
/// - 'l' -> left
/// - 'x' -> left + right
/// - 'y' -> bottom + top
///
/// @access public
///
/// @since 0.9.3
///
/// @return {List} All the valid directions this axis builder can take

@function axis-directions() {
    @return (null, t, r, b, l, x, y);
}


/// Generate CSS properties with the specified value based on an axis
///
/// @access public
///
/// @param {String|null} $axis  - The axis we're working with
/// @param {String}      $prop  - The CSS property base name to get the value of; e.g. margin will take on margin-top
/// @param {*}           $value - The value the CSS property will be taking
///
/// @see axis-directions()
///
/// @since 0.9.3

@mixin build-axis($axis, $prop, $value) {
    @if $axis == null {
        #{$prop}: $value;
    }
    @else if $axis == t {
        #{$prop}-top: $value;
    }
    @else if $axis == r {
        #{$prop}-right: $value;
    }
    @else if $axis == b {
        #{$prop}-bottom: $value;
    }
    @else if $axis == l {
        #{$prop}-left: $value;
    }
    @else if $axis == x {
        #{$prop}-left: $value;
        #{$prop}-right: $value;
    }
    @else if $axis == y {
        #{$prop}-bottom: $value;
        #{$prop}-top: $value;
    }
}


/// Build utility CSS classes used for CSS properties that have 4 directions (top, right, bottom, left) such as margin,
/// padding, and border.
///
/// @access public
///
/// @param {String} $abbrev - A single letter abbreviation (ideally) representing the property that will be targeted
/// @param {Number} $size   - A multiplier that will be in the class name used to represent what $value would be
/// @param {String} $prop   - The CSS property that we'll be targeting
/// @param {String} $suffix - A suffix to be added to the CSS classes; this is ideal for suffixing breakpoints. It's
///                           necessary to prepend a '-' to this suffix as it will not be added automatically.
/// @param {*}      $value  - The value the CSS property will take
///
/// @example scss
///   @include build-axes(m, 0, margin, '-lg', 0);
///
/// @example css
///   .m0-lg  { margin: 0; }
///   .mt0-lg { margin-top: 0; }
///   .mr0-lg { margin-right: 0; }
///   .mb0-lg { margin-bottom: 0; }
///   .ml0-lg { margin-left: 0; }
///   .mx0-lg { margin-left: 0; margin-right: 0; }
///   .my0-lg { margin-bottom: 0; margin-top: 0; }
///
/// @since 0.9.3

@mixin build-axes($abbrev, $size, $prop, $suffix, $value) {
    @each $axis in axis-directions() {
        .#{$abbrev}#{$axis}#{$size}#{$suffix} {
            @include build-axis($axis, $prop, $value);
        }
    }
}


///
/// @access public
///
/// @since 0.9.3

@mixin build-axes-last($abbrev, $prop, $value, $size: ('')) {
    @each $a in axis-directions() {
        %__#{$abbrev}#{$a} {
            @include build-axis($a, $prop, $value);
        }

        .#{$abbrev}#{$a}-last-reset {
            @each $s in $size {
                > .#{$abbrev}#{$a}#{$s}:last-of-type {
                    @extend %__#{$abbrev}#{$a};
                }
            }
        }
    }
}
