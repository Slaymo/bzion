/// Get the the separator used between an element or a modifier for the BEM convention
///
/// @access private
///
/// @param {String} $object
///   Accepted values: `element` or `modifier`
///
/// @link https://en.bem.info/method/definitions/

@function bem-separator($object) {
    @if ($object == 'element') {
        @return '__';
    }
    @else if ($object == 'modifier') {
        @return '--';
    }

    @return '';
}


/// Generate the appropriate CSS to follow the BEM convention.
///
/// @access private
///
/// @param {String} $object
///   Accepted values: `element` or `modifier`
/// @param {List} $elements
///   The list of element(s) we'll be creating the CSS structure for
///
/// @link https://en.bem.info/method/definitions/
///

@mixin bem-standard($object, $elements) {
    @if length($elements) == 1 {
        $element: nth($elements, 1);

        &#{bem-separator($object)}#{$element} {
            @content;
        }
    }
    @else {
        $class_list: '';

        @each $element in $elements {
            // The last comma doesn't matter since SASS will automatically remove it on compilation
            $class_list: $class_list + "&#{bem-separator($object)}" + $element + ', ';
        }

        #{$class_list} {
            @content;
        }
    }
}


/// Create a Block Element following the BEM naming scheme
///
/// @param {String|Argument List} $elements
///   A single element's name or an argument list of elements
///
/// @example scss - Usage
///   .foo {
///       @include element('header') {
///           display: block;
///       }
///
///       @include element('body', 'footer') {
///           display: inline-block;
///       }
///   }
///
/// @example css - Output
///   .foo .foo__header {
///       display: block;
///   }
///   .foo .foo__body, .foo .foo__footer {
///       display: inline-block;
///   }

@mixin element($elements...) {
    @include bem-standard('element', $elements) {
        @content;
    }
}


/// Create a Block Modifier following the BEM naming scheme
///
/// @param {String|Argument List} $modifiers
///   A single modifier's name or an argument list of modifiers
///
/// @example scss - Usage
///   .bar {
///       @include modifier('quarter') {
///           display: inline-block;
///       }
///
///       @include modifier('full', 'half') {
///           display: block;
///       }
///   }
///
/// @example css - Output
///   .bar .bar--quarter {
///       display: inline-block;
///   }
///   .bar .bar--full, .bar .bar--half {
///       display: block;
///   }


@mixin modifier($modifiers...) {
    @include bem-standard('modifier', $modifiers) {
        @content;
    }
}


//
// These CSS namespaces and descriptions come from CSS Wizardry
//
// http://csswizardry.com/2015/03/more-transparent-ui-code-with-namespaces/
//


/// Objects abstract out the repetitive, shared, and purely structural aspects of a UI into
/// reusable objects. This means that things like layout, wrappers and containers, the Media
/// Object, etc. can all exist as non-cosmetic styles that handle the skeletal aspect of a lot
/// of UI components, without ever actually looking like designed ‘things’.
///
/// @param {String} $name
///   Object's name

@mixin object($name) {
    .o-#{$name} {
        @content;
    }
}


/// Components are finite, discrete, implementation-specific parts of our UI that most people
/// (users, designers, developers, the business) would be able to identify: This is a button;
/// This is the date picker; etc.
///
/// @param {String} $name
///   Component's name

@mixin component($name) {
    .c-#{$name} {
        @content;
    }
}


/// Utilities are complete single responsibility rules which have a very specific and targeted
/// task. It is also quite common for these rules’ declarations to carry !important so as to
/// guarantee they beat other less specific ones. They do one thing in a very heavy-handed and
/// inelegant way. They are to be used as a last resort when no other CSS hooks are available,
/// or to tackle completely unique circumstances, e.g. using .u-text-center to centrally align
/// one piece of text once and once only. They are only one step away from inline styles, so
/// should be used sparingly.
///
/// @param {String} $name
///   Utility's name

@mixin utility($name) {
    .u-#{$name} {
        @content;
    }
}


/// When we work with Stateful Themes (that is to say, themes that we toggle on and off) we normally
/// do so by adding a class to the body element. Examples of this approach to theming include style-
/// switchers (a user can toggle between different themes) and sub-sections of a site (all blog posts
/// have one theme colour, all news pages have another theme colour, etc.). We simply add a class high
/// up the DOM which then invokes that theme for that particular page.
///
/// @param {String} $name
///   Theme's name

@mixin theme($name) {
    .t-#{$name} & {
        @content;
    }
}


/// Scoped contexts in CSS solve a very specific and particular problem: please be entirely certain
/// that you actually have this problem before employing Scopes, because they can be misused and end
/// up leading to actively bad CSS.
///
/// Oftentimes it can be useful to set up a brand new styling context for a particular section of your
/// UI. A perfect example of this is areas of user-generated content, where some long-form/prose HTML
/// has come from a CMS. The styling of this kind of content usually differs from the more app-like UI
/// around it. You may have a class-heavy UI architecture to provide complex pieces of design like
/// navigations, buttons, modals, etc., and inside all of this you may have a simple blog post which is
/// populated via a CMS where the user writes plain text and cannot add any classes or complexity.
///
/// @param {String} $name
///   Scope's name

@mixin scope($name) {
    .s-#{$name} {
        @content;
    }
}


/// Short-lived or temporary states of the UI that need styling accordingly.
///
/// When looking at a piece of interactive UI (e.g. a modal overlay) through developer tools, we’ll probably
/// spend some time toggling things on and off. Being able to see classes like .is-open appear and disappear
/// in the DOM is a highly readable and very obvious way of learning about state
///
/// @param {String} $name
///   State's name

@mixin is($name) {
    &.is-#{$name} {
        @content;
    }
}


/// @see {mixin} is
///
/// @param {String} $name
///   State's name

@mixin has($name) {
    &.has-#{$name} {
        @content;
    }
}


/// JavaScript namespaces are pretty common now, and most people tend to use them. The idea is that—in order
/// to properly separate our concerns—we should never have styling and behaviour bound to the same hooks. To
/// bind both technologies onto the same hook means we can’t have one without the other: our UI becomes all-
/// or-nothing, which makes it very opinionated and inflexible.
///
/// @param {String} $name
///   Javascript class' name

@mixin javascript($name) {
    .js-#{$name} {
        @content;
    }
}
