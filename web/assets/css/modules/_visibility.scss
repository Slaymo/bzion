/// Set the visibility of a specific element to be visible or hidden based on the screen width. An element will only be
/// visible when the screen is at the specified width. For example, if you have an element only be visible on xs,
/// you would set the minimum and maximum screen size a phone would have. You can use pre-defined values such as
/// `$phone-min-size` and `$phone-max-size` to stay consistent with the project. This function should not be accessed
/// directly and instead should only be used through convenience mixins.
///
/// @access private
///
/// @param {Boolean} $hide
///   Whether you want to hide or display the specified element in the specified screen width. True to display the element
///   **only** on the specified screen size.
/// @param {Number [unit]} $min
///   The minimum size a screen should have in order for the specified element to be displayed
/// @param {Number [unit]} $max
///   (Optional) The maximum size a screen should have in order for the specified element to be displayed. If no maximum
///   or 0 is specified, then the element will be displayed on a screen size at least `$min` in width.

@mixin __set-visible($hide, $media) {
    display: if($hide, none, block);

    @include respond-only-to($media) {
        display: if($hide, block, none);
    }
}


/// A mixin that will hide the specified element
///
/// @param {String} $media
///   Accepted view sizes: `phones`, `phablets`, `tablets`
///
/// @example scss
///   .hide-desktop-only {
///       @include invisible(lg);
///   }

@mixin invisible($viewSize) {
    @include __set-visible(false, $viewSize);
}


/// A mixin that will make the specified element
///
/// @param {String} $media
///   Accepted view sizes: `phones`, `phablets`, `tablets`
///
/// @example scss
///   .display-phone-only {
///       @include visible(xs);
///   }

@mixin visible($viewSize) {
    @include __set-visible(true, $viewSize);
}
