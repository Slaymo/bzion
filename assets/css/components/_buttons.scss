$Button-Colors: (
    'red': #db3434,
    'blue': #3498db,
    'grey': #dbdbdb,
    'black': #4f4f4f,
    'green': #34db6d,
    'orange': #ff8400,
    'purple': #6f34db,
    'yellow': #ffb608
);

// A button
.c-button {
    border-radius: $Border-Radius;
    color: $Color-White;
    cursor: pointer;
    display: inline-block;
    font-size: 14px;
    padding: 3px 15px 4px 13px;
    text-decoration: none;

    .fa {
        @extend %fa-fw;
    }
}

// A skinnier version of the button
.c-button--skinny {
    padding: 0 15px 1px;
}

// A button but with the default cursor instead of a pointer
.c-button--no-click {
    cursor: default;
}

// Loop through available button colors and create modifiers for each
@each $color, $value in $Button-Colors {
    .c-button--#{$color} {
        $dark_color: darken($value, 7%);

        background: linear-gradient($value, $dark_color);
        border: 1px solid $dark_color;
        color: set-text-from-color($value);
        text-decoration: none;

        // Workaround for ensuring that anchor tags with the .c-button class have the correct color for its text. This
        // ensures that this rule supersedes the theme defined anchor tag rule; i.e. `.t-light a {}`. Doing it this way
        // will prevent us from having to use !important
        @at-root a#{&} {
            color: set-text-from-color($value);
        }

        &:hover {
            &:not(.c-button--no-hover) {
                $hoverColor: darken($value, 3%);
                $hoverDarkColor: darken($hoverColor, 7%);

                background: linear-gradient($hoverColor, $hoverDarkColor);
                border-color: $hoverDarkColor;
                color: set-text-from-color($hoverColor);
            }
        }
    }
}

// A helper class used exclusively for :not() references to not apply .c-button styles. This class should be kept empty
// and is kept on here to remember not to use this class for any other reasons.
.c-button--no-style {}
